stages:
  - nodebuild
  - test
  - nginxbuild

include:
  remote: https://code.ornl.gov/rse-deployment/rse-sharables/raw/master/.gitlab-ci-before_script.yml

variables:
  NODE_URL: '${CI_REGISTRY_IMAGE}/ssm-fe-node'
  NGINX_URL: '${CI_REGISTRY_IMAGE}/ssm-fe-nginx'
  NODE_IMAGE_NAME: 'ssm-fe-node'
  DOCKER_APP_WORKDIR: '/usr/local/src'

after_script:
  - curl https://code.ornl.gov/rse-deployment/rse-sharables/raw/master/rse-bash-modules.sh -O
  - source rse-bash-modules.sh
  - func_rse_docker_cleanup
  - sudo chown -R gitlab-runner .

nodebuild:
  stage: nodebuild
  script:
    - func_rse_docker_cleanup
    - docker login --username=$CI_REGISTRY_USER --password=$CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f node.Dockerfile --build-arg ci=true -t $NODE_URL/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA .
    - docker tag $NODE_URL/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA $NODE_URL/$CI_COMMIT_REF_NAME:latest
    - docker push $NODE_URL/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
    - docker push $NODE_URL/$CI_COMMIT_REF_NAME:latest
  tags:
    - rse-multi-builder

# fail if auditing returns 'high' or 'critical' vulnerabilities, report all vulnerabilities
test_audit:
  stage: test
  variables:
    AUDIT_OUTFILE: 'audit-report.txt'
  artifacts:
    when: always
    paths:
      - audit-report.txt
  script:
    - func_rse_docker_cleanup
    - docker login --username=$CI_REGISTRY_USER --password=$CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $NODE_URL/$CI_COMMIT_REF_NAME
    - docker run --name $NODE_IMAGE_NAME $NODE_URL/$CI_COMMIT_REF_NAME sh -c "bin/audit.js" > $AUDIT_OUTFILE
  tags:
    - rse-multi-builder

test_lint:
  stage: test
  script:
    - func_rse_docker_cleanup
    - docker login --username=$CI_REGISTRY_USER --password=$CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $NODE_URL/$CI_COMMIT_REF_NAME
    - docker run --name $NODE_IMAGE_NAME $NODE_URL/$CI_COMMIT_REF_NAME sh -c "yarn run assert-no-warnings"
  tags:
    - rse-multi-builder

test_jest:
  stage: test
  script:
    - func_rse_docker_cleanup
    - docker login --username=$CI_REGISTRY_USER --password=$CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $NODE_URL/$CI_COMMIT_REF_NAME
    - docker run --name $NODE_IMAGE_NAME $NODE_URL/$CI_COMMIT_REF_NAME sh -c "yarn test"
  tags:
    - rse-multi-builder

nginxbuild:
  stage: nginxbuild
  script:
    - func_rse_docker_cleanup
    - docker login --username=$CI_REGISTRY_USER --password=$CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $NODE_URL/$CI_COMMIT_REF_NAME
    # update any necessary files with environment variables before running 'build'
    - docker run --name $NODE_IMAGE_NAME $NODE_URL/$CI_COMMIT_REF_NAME sh -c "bin/ci-node-substitutions.sh $CI_COMMIT_REF_NAME && yarn run build"
    - sudo rm -rf .ci/build || true
    - docker cp $NODE_IMAGE_NAME:$DOCKER_APP_WORKDIR/build .ci/build
    # update nginx configuration files before building final image
    - bin/ci-nginx-substitutions.sh
    - docker build -f .ci/nginx.Dockerfile -t $NGINX_URL/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA .ci/
    - docker tag $NGINX_URL/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA $NGINX_URL/$CI_COMMIT_REF_NAME:latest
    - docker push $NGINX_URL/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
    - docker push $NGINX_URL/$CI_COMMIT_REF_NAME:latest
  only:
    - dev
    - qa
    - main
  tags:
    - rse-multi-builder
